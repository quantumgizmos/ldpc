
# This workflow builds the source distribution (sdist) and the binary wheels using cibuildwheel,
# and finally uploads these artifacts to PyPI when code is pushed to the "release" branch.
name: Build

on:
  push:
    branches:
      - release  # Trigger the workflow only on pushes to the "release" branch.

jobs:
  # -------- Job: Build SDist (Source Distribution) --------
  # The sdist packages your source code into a compressed archive (typically .tar.gz),
  # which allows users to rebuild the package on their system.
  build_sdist:
    name: Build SDist
    runs-on: ubuntu-latest  # Run on a fresh Ubuntu environment.
    steps:
      # Checkout the repository and any submodules.
      - name: Checkout out repo and submodules
        uses: actions/checkout@v4
        with:
          submodules: true  # Ensures all submodules are also cloned.
      
      # Install build tools using pipx in an isolated environment.
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip   # Upgrade pip.
          pip install pipx                        # Install pipx for isolated CLI tool execution.
          pipx ensurepath                         # Add pipx's binary path to the PATH.
          pipx install build                      # Install the 'build' package to create the sdist.
          pipx install twine                      # Install 'twine' for artifact validation and PyPI upload.
      
      # Build the source distribution (sdist).
      # This command creates a .tar.gz file in the "dist" folder.
      - name: Build SDist
        run: pipx run build --sdist

      # Check the metadata of the built distribution using twine.
      - name: Check metadata
        run: pipx run twine check dist/*
      
      # Upload the sdist artifact.
      # The "name" attribute identifies this artifact as "sdist".
      # The "path" attribute specifies the files (all .tar.gz in dist/) to be uploaded.
      - uses: actions/upload-artifact@v4
        with:
          name: sdist         # Artifact identifier: "sdist"
          path: dist/*.tar.gz  # Local file path pattern to upload.

  # -------- Job: Build Wheels --------
  # Wheels are precompiled binary distributions which install faster than sdists.
  # cibuildwheel automates the creation of wheels across different platforms and Python versions.
  build_wheels:
    runs-on: ${{ matrix.os_dist.os }}  # Run on the OS specified by the matrix.
    env:
      CIBW_BUILD: "${{ matrix.os_dist.dist }}"  # Build configuration, e.g. cp39-macosx_x86_64.
      CIBW_ARCHS_MACOS: "arm64 x86_64"  # For macOS, build wheels supporting both arm64 and x86_64.
      CIBW_REPAIR_WHEEL_COMMAND_MACOS: delocate-wheel -w {dest_dir} -v {wheel}  # Repair command to fix dependencies in macOS wheels.
    strategy:
      fail-fast: false  # Continue with other matrix builds even if one fails.
      matrix:
        os_dist: [
          # macOS wheels for CPython (x86_64)
          {os: macos-latest, dist: cp39-macosx_x86_64},
          {os: macos-latest, dist: cp310-macosx_x86_64},
          {os: macos-latest, dist: cp311-macosx_x86_64},
          {os: macos-latest, dist: cp312-macosx_x86_64},
          {os: macos-latest, dist: cp313-macosx_x86_64},
          # macOS wheels for CPython (arm64)
          {os: macos-latest, dist: cp39-macosx_arm64},
          {os: macos-latest, dist: cp310-macosx_arm64},
          {os: macos-latest, dist: cp311-macosx_arm64},
          {os: macos-latest, dist: cp312-macosx_arm64},
          {os: macos-latest, dist: cp313-macosx_arm64},
          # Windows wheels
          {os: windows-latest, dist: cp39-win_amd64},
          {os: windows-latest, dist: cp310-win_amd64},
          {os: windows-latest, dist: cp311-win_amd64},
          {os: windows-latest, dist: cp312-win_amd64},
          {os: windows-latest, dist: cp313-win_amd64},
          # Ubuntu (Manylinux) wheels
          {os: ubuntu-latest, dist: cp39-manylinux_x86_64},
          {os: ubuntu-latest, dist: cp310-manylinux_x86_64},
          {os: ubuntu-latest, dist: cp311-manylinux_x86_64},
          {os: ubuntu-latest, dist: cp312-manylinux_x86_64},
          {os: ubuntu-latest, dist: cp313-manylinux_x86_64},
        ]
    steps:
      # Checkout the repository and its submodules.
      - uses: actions/checkout@v4
        with:
          submodules: true

      # Run cibuildwheel to build the wheels.
      # cibuildwheel creates wheels for the specified configurations in isolated environments.
      - name: Run cibuildwheel
        uses: pypa/cibuildwheel@v3.1.1

      # Upload the built wheels as artifacts.
      # The artifact name includes the GitHub run ID and matrix configuration to uniquely identify the wheels.
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ github.run_id }}-${{ matrix.os_dist.dist }}  # Unique artifact identifier.
          path: ./wheelhouse/*.whl  # Local path where cibuildwheel stores the wheel files.

  # -------- Job: Upload to PyPI --------
  # This job downloads the previously uploaded sdist and wheels artifacts,
  # then uses the pypa/gh-action-pypi-publish action to upload all files in the "dist" folder to PyPI.
  upload_pypi:
    needs: [build_wheels, build_sdist]  # Wait for both build jobs to complete.
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository (useful if configuration files are needed).
      - name: Checkout out repo and submodules
        uses: actions/checkout@v4
        with:
          submodules: true

      # Download the sdist artifact.
      # "name" in the download action refers to the artifact identifier to fetch (here, "sdist").
      # "path" specifies where the downloaded file(s) should be placed on the runner.
      - name: Download SDist
        uses: actions/download-artifact@v4
        with:
          name: sdist   # Download the artifact previously uploaded as "sdist".
          path: dist    # Place the downloaded files into the "dist" directory.

      # Download all wheels artifacts.
      # "pattern" specifies a pattern to match artifact names; here it matches any artifact starting with "wheels-".
      # "path" again specifies the destination directory.
      # "merge-multiple: true" indicates that if multiple matching artifacts are found, their contents are merged into one folder.
      - name: Download Wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*  # Match all artifacts whose names begin with "wheels-".
          path: dist         # Place all downloaded wheel files into the "dist" directory.
          merge-multiple: true

      # Publish to PyPI.
      # The pypa/gh-action-pypi-publish@release/v1 action uploads all files present in the "dist" folder to PyPI.
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_PASSWORD }}  # Supply the secure PyPI API token.
          skip-existing: true  # Skip files already present on PyPI.
          verbose: true        # Enable verbose output during the upload.
